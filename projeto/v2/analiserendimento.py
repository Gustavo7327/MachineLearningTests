# -*- coding: utf-8 -*-
"""AnaliseRendimento.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17jkGAOQrqzmcPcr1WkrD5tdEnrRUNEnH
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, accuracy_score
import matplotlib.pyplot as plt

data = pd.read_csv('dados.csv')
data.head()

data['Target'] = data['Media'].apply(lambda x: 'A' if x >= 9 else ('B' if x >= 8 else ('C' if x >= 7 else 'D')))
data.head()

x = data.drop(['Nome (codificado)', 'Target'], axis=1)
y = data['Target']
x.dtypes

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)

model.fit(x_train, y_train)

y_pred = model.predict(x_test)

import numpy as np
accuracy = accuracy_score(y_test, y_pred)*100
precision = precision_score(y_test, y_pred, average="macro")*100
recall = recall_score(y_test, y_pred, average="macro")*100
print(f"Porcentagem de acerto: {accuracy:.2f}%")
print(f"Precision: {precision:.2f}%")
print(f"Recall: {recall:.2f}%")

importances = model.feature_importances_
print(importances)

plt.figure(figsize=(48, 6))
plt.bar(x.columns, importances)
plt.xlabel("Variáveis")
plt.ylabel("Importância")
plt.title("Importância de Recursos (Random Forest)")
fig = plt.gcf()
plt.show()

import os
nome_arquivo = "graficofinal.png"
diretorio = os.path.join(os.getcwd())
fig.savefig(os.path.join(diretorio, nome_arquivo))

"""**Exemplo só com as notas**"""

data2 = pd.read_csv('somentenotas.csv')
data2.head()

data2['Target'] = data2['Media'].apply(lambda x: 'A' if x >= 9 else ('B' if x >= 8 else ('C' if x >= 7 else 'D')))
data2.head()

x2 = data2.drop(['Nome (codificado)', 'Target'], axis=1)
y2 = data2['Target']
x2.dtypes

x_train2, x_test2, y_train2, y_test2 = train_test_split(x2, y2, test_size=0.3, random_state=42)

model2 = RandomForestClassifier(n_estimators=100, random_state=42)

model2.fit(x_train2, y_train2)

y_pred2 = model2.predict(x_test2)

accuracy2 = accuracy_score(y_test2, y_pred2)*100
precision2 = precision_score(y_test2, y_pred2, average="macro")*100
recall2 = recall_score(y_test2, y_pred2, average="macro")*100
print(f"Porcentagem de acerto: {accuracy2:.2f}%")
print(f"Precision: {precision2:.2f}%")
print(f"Recall: {recall2:.2f}%")

importances2 = model2.feature_importances_
print(importances2)

plt.figure(figsize=(20, 6))
plt.bar(x2.columns, importances2)
plt.xlabel("Variáveis")
plt.ylabel("Importância")
plt.title("Importância de Recursos (Random Forest)")
fig = plt.gcf()
plt.show()

import os
nome_arquivo = "graficofinal2.png"
diretorio = os.path.join(os.getcwd())
fig.savefig(os.path.join(diretorio, nome_arquivo))

"""**Somente média e dados socioeconômicos**"""

data3 = pd.read_csv('mediaesocio.csv')
data3.head()

data3['Target'] = data3['Media'].apply(lambda x: 'A' if x >= 9 else ('B' if x >= 8 else ('C' if x >= 7 else 'D')))
data3.head()

x3 = data3.drop(['Nome (codificado)', 'Target'], axis=1)
y3 = data3['Target']
x3.dtypes

x_train3, x_test3, y_train3, y_test3 = train_test_split(x3, y3, test_size=0.3, random_state=42)

model3 = RandomForestClassifier(n_estimators=100, random_state=42)

model3.fit(x_train3, y_train3)

y_pred3 = model3.predict(x_test3)

accuracy3 = accuracy_score(y_test3, y_pred3)*100
precision3 = precision_score(y_test3, y_pred3, average="macro")*100
recall3 = recall_score(y_test3, y_pred3, average="macro")*100
print(f"Porcentagem de acerto: {accuracy3:.2f}%")
print(f"Precision: {precision3:.2f}%")
print(f"Recall: {recall3:.2f}%")

importances3 = model3.feature_importances_
print(importances3)

plt.figure(figsize=(28, 6))
plt.bar(x3.columns, importances3)
plt.xlabel("Variáveis")
plt.ylabel("Importância")
plt.title("Importância de Recursos (Random Forest)")
fig = plt.gcf()
plt.show()

data4 = pd.read_csv('dados.csv')
data4.head()

data4['Target'] = data4['Media'].apply(lambda x: 'A' if x >= 9 else ('B' if x >= 8 else ('C' if x >= 7 else 'D')))
data4.head()

x4 = data4.drop(['Nome (codificado)', 'Target', 'Media'], axis=1)
y4 = data4['Target']
x4.dtypes

x_train4, x_test4, y_train4, y_test4 = train_test_split(x4, y4, test_size=0.3, random_state=42)

model4 = RandomForestClassifier(n_estimators=100, random_state=42)

model4.fit(x_train4, y_train4)

y_pred4 = model4.predict(x_test4)

accuracy4 = accuracy_score(y_test4, y_pred4)*100
precision4 = precision_score(y_test4, y_pred4, average="macro")*100
recall4 = recall_score(y_test4, y_pred4, average="macro")*100
print(f"Porcentagem de acerto: {accuracy4:.2f}%")
print(f"Precision: {precision4:.2f}%")
print(f"Recall: {recall4:.2f}%")

importances4 = model4.feature_importances_
print(importances4)

plt.figure(figsize=(40, 6))
plt.bar(x4.columns, importances4)
plt.xlabel("Variáveis")
plt.ylabel("Importância")
plt.title("Importância de Recursos (Random Forest)")
fig = plt.gcf()
plt.show()